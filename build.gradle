plugins {
    id 'org.springframework.boot' version '2.5.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'

    // Asciidoctor 플러그인 적용
    id 'org.asciidoctor.convert' version '1.5.9.2'
    id 'java'
}

group = 'com.anytime'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'




    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'

    compileOnly 'org.projectlombok:lombok:1.18.16'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    annotationProcessor 'org.projectlombok:lombok'
    implementation "org.apache.commons:commons-lang3"

    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

ext {
    set('springCloudVersion', "2020.0.4")

    // Snippet 의 생성 위치를 지정
    snippetsDir = file('build/generated-snippets')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    // Snippets 디렉토리를 출력으로 작업하도록 설정
    outputs.dir(snippetsDir)
    useJUnitPlatform()
}

asciidoctor {
    // Snippets 디렉토리를 Input 디렉토리로 설정
    inputs.dir(snippetsDir)

    // 문서 생성 전 테스트가 실행되도록 test 에 종속 설정
    dependsOn(test)
}

bootJar {
    // 빌드 전 문서 생성 확인
    dependsOn(asciidoctor)

    // 생성된 문서를 static/docs 에 복사
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}



//def webappDir = "$projectDir/src/main/frontend/studymaker"
//
//sourceSets {
//main {
//resources {
//srcDirs = ["$webappDir/build", "$projectDir/src/main/resources"]
//}
//}
//}
//
//processResources {
//dependsOn "buildReact"
//}
//
//task buildReact(type: Exec) {
//dependsOn "installReact"
//workingDir "$webappDir"
//inputs.dir "$webappDir"
//group = BasePlugin.BUILD_GROUP
//if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
//commandLine "npm.cmd", "run-script", "build"
//} else {
//commandLine "npm", "run-script", "build"
//}
//}
//
//task installReact(type: Exec) {
//workingDir "$webappDir"
//inputs.dir "$webappDir"
//group = BasePlugin.BUILD_GROUP
//if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
//commandLine "npm.cmd", "audit", "fix"
//commandLine 'npm.cmd', 'install'
//} else {
//commandLine "npm", "audit", "fix"
//commandLine 'npm', 'install'
//}
//}
